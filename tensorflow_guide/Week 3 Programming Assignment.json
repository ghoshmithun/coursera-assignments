{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Programming Assignment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model validation on the Iris dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Instructions\n",
    "\n",
    "In this notebook, you will build, compile and fit a neural network model to the Iris dataset. You will also implement validation, regularisation and callbacks to improve your model.\n",
    "\n",
    "Some code cells are provided you in the notebook. You should avoid editing provided code, and make sure to execute the cells in order to avoid unexpected errors. Some cells begin with the line: \n",
    "\n",
    "`#### GRADED CELL ####`\n",
    "\n",
    "Don't move or edit this first line - this is what the automatic grader looks for to recognise graded cells. These cells require you to write your own code to complete them, and are automatically graded when you submit the notebook. Don't edit the function name or signature provided in these cells, otherwise the automatic grader might not function properly. Inside these graded cells, you can use any functions or classes that are imported below, but make sure you don't use any variables that are outside the scope of the function.\n",
    "\n",
    "### How to submit\n",
    "\n",
    "Complete all the tasks you are asked for in the worksheet. When you have finished and are happy with your code, press the **Submit Assignment** button at the top of this notebook.\n",
    "\n",
    "### Let's get started!\n",
    "\n",
    "We'll start running some imports, and loading the dataset. Do not edit the existing imports in the following cell. If you would like to make further Tensorflow imports, you should add them here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### PACKAGE IMPORTS ####\n",
    "\n",
    "# Run this cell first to import all required packages. Do not make any imports elsewhere in the notebook\n",
    "from numpy.random import seed\n",
    "seed(8)\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import datasets, model_selection \n",
    "%matplotlib inline\n",
    "\n",
    "# If you would like to make further imports from tensorflow, add them here\n",
    "from sklearn.model_selection import train_test_split\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<tr>\n",
    "<td><img src=\"data/iris_setosa.jpg\" alt=\"Drawing\" style=\"height: 270px;\"/></td>\n",
    "<td><img src=\"data/iris_versicolor.jpg\" alt=\"Drawing\" style=\"height: 270px;\"/></td>\n",
    "<td><img src=\"data/iris_virginica.jpg\" alt=\"Drawing\" style=\"height: 270px;\"/></td>\n",
    "</tr>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The Iris dataset\n",
    "\n",
    "In this assignment, you will use the [Iris dataset](https://scikit-learn.org/stable/auto_examples/datasets/plot_iris_dataset.html). It consists of 50 samples from each of three species of Iris (Iris setosa, Iris virginica and Iris versicolor). Four features were measured from each sample: the length and the width of the sepals and petals, in centimeters. For a reference, see the following papers:\n",
    "\n",
    "- R. A. Fisher. \"The use of multiple measurements in taxonomic problems\". Annals of Eugenics. 7 (2): 179â€“188, 1936.\n",
    "\n",
    "Your goal is to construct a neural network that classifies each sample into the correct class, as well as applying validation and regularisation techniques."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Load and preprocess the data\n",
    "\n",
    "First read in the Iris dataset using `datasets.load_iris()`, and split the dataset into training and test sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### GRADED CELL ####\n",
    "\n",
    "# Complete the following function. \n",
    "# Make sure to not change the function name or arguments.\n",
    "\n",
    "def read_in_and_split_data(iris_data):\n",
    "    \"\"\"\n",
    "    This function takes the Iris dataset as loaded by sklearn.datasets.load_iris(), and then \n",
    "    splits so that the training set includes 90% of the full dataset, with the test set \n",
    "    making up the remaining 10%.\n",
    "    Your function should return a tuple (train_data, test_data, train_targets, test_targets) \n",
    "    of appropriately split training and test data and targets.\n",
    "    \n",
    "    If you would like to import any further packages to aid you in this task, please do so in the \n",
    "    Package Imports cell above.\n",
    "    \"\"\"\n",
    "    data = iris_data['data']\n",
    "    targets = iris_data['target']\n",
    "    return train_test_split(data,targets,test_size=0.10)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run your function to generate the test and training data.\n",
    "\n",
    "iris_data = datasets.load_iris()\n",
    "train_data, test_data, train_targets, test_targets = read_in_and_split_data(iris_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will now convert the training and test targets using a one hot encoder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert targets to a one-hot encoding\n",
    "\n",
    "train_targets = tf.keras.utils.to_categorical(np.array(train_targets))\n",
    "test_targets = tf.keras.utils.to_categorical(np.array(test_targets))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Build the neural network model\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can now construct a model to fit to the data. Using the Sequential API, build your model according to the following specifications:\n",
    "\n",
    "* The model should use the `input_shape` in the function argument to set the input size in the first layer.\n",
    "* The first layer should be a dense layer with 64 units.\n",
    "* The weights of the first layer should be initialised with the He uniform initializer.\n",
    "* The biases of the first layer should be all initially equal to one.\n",
    "* There should then be a further four dense layers, each with 128 units.\n",
    "* This should be followed with four dense layers, each with 64 units.\n",
    "* All of these Dense layers should use the ReLU activation function.\n",
    "* The output Dense layer should have 3 units and the softmax activation function.\n",
    "\n",
    "In total, the network should have 10 layers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### GRADED CELL ####\n",
    "\n",
    "# Complete the following function. \n",
    "# Make sure to not change the function name or arguments.\n",
    "\n",
    "def get_model(input_shape):\n",
    "    \"\"\"\n",
    "    This function should build a Sequential model according to the above specification. Ensure the \n",
    "    weights are initialised by providing the input_shape argument in the first layer, given by the\n",
    "    function argument.\n",
    "    Your function should return the model.\n",
    "    \"\"\"\n",
    "#     initializer = tf.keras.initializers.he_uniform()\n",
    "    \n",
    "#     model=tf.keras.Sequential([\n",
    "#         tf.keras.layers.Dense(64,activation='relu',bias_initializer='ones',\n",
    "#                               kernel_initializer=initializer,input_shape=input_shape),\n",
    "#         tf.keras.layers.Dense(128,activation='relu'),\n",
    "#         tf.keras.layers.Dense(64,activation='relu'),\n",
    "#         tf.keras.layers.Dense(3,activation='softmax')\n",
    "#     ])\n",
    "\n",
    "    model = tf.keras.Sequential([\n",
    "        tf.keras.layers.Dense(64, activation='relu', kernel_initializer='he_uniform', bias_initializer='ones', input_shape=input_shape),\n",
    "        tf.keras.layers.Dense(128, activation='relu'),\n",
    "          tf.keras.layers.Dense(128, activation='relu'),\n",
    "          tf.keras.layers.Dense(128, activation='relu'),\n",
    "          tf.keras.layers.Dense(128, activation='relu'),\n",
    "          tf.keras.layers.Dense(64, activation='relu'),\n",
    "          tf.keras.layers.Dense(64, activation='relu'),\n",
    "          tf.keras.layers.Dense(64, activation='relu'),\n",
    "          tf.keras.layers.Dense(64, activation='relu'),\n",
    "          tf.keras.layers.Dense(3, activation='softmax')\n",
    "    ])\n",
    "    return model\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run your function to get the model\n",
    "\n",
    "model = get_model(train_data[0].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Compile the model\n",
    "\n",
    "You should now compile the model using the `compile` method. Remember that you need to specify an optimizer, a loss function and a metric to judge the performance of your model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### GRADED CELL ####\n",
    "\n",
    "# Complete the following function. \n",
    "# Make sure to not change the function name or arguments.\n",
    "\n",
    "def compile_model(model):\n",
    "    \"\"\"\n",
    "    This function takes in the model returned from your get_model function, and compiles it with an optimiser,\n",
    "    loss function and metric.\n",
    "    Compile the model using the Adam optimiser (with learning rate set to 0.0001), \n",
    "    the categorical crossentropy loss function and accuracy as the only metric. \n",
    "    Your function doesn't need to return anything; the model will be compiled in-place.\n",
    "    \"\"\"\n",
    "    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),\n",
    "                  loss='categorical_crossentropy',metrics=['accuracy'])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run your function to compile the model\n",
    "\n",
    "compile_model(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Fit the model to the training data\n",
    "\n",
    "Now you should train the model on the Iris dataset, using the model's `fit` method. \n",
    "* Run the training for a fixed number of epochs, given by the function's `epochs` argument.\n",
    "* Return the training history to be used for plotting the learning curves.\n",
    "* Set the batch size to 40.\n",
    "* Set the validation set to be 15% of the training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### GRADED CELL ####\n",
    "\n",
    "# Complete the following function. \n",
    "# Make sure to not change the function name or arguments.\n",
    "\n",
    "def train_model(model, train_data, train_targets, epochs):\n",
    "    \"\"\"\n",
    "    This function should train the model for the given number of epochs on the \n",
    "    train_data and train_targets. \n",
    "    Your function should return the training history, as returned by model.fit.\n",
    "    \"\"\"\n",
    "    history = model.fit(train_data,train_targets,epochs=epochs,verbose=False,validation_split=0.15)\n",
    "    return history"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the following cell to run the training for 800 epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run your function to train the model\n",
    "\n",
    "history = train_model(model, train_data, train_targets, epochs=800)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot the learning curves\n",
    "\n",
    "We will now plot two graphs:\n",
    "* Epoch vs accuracy\n",
    "* Epoch vs loss\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Run this cell to plot the epoch vs accuracy graph\n",
    "\n",
    "try:\n",
    "    plt.plot(history.history['accuracy'])\n",
    "    plt.plot(history.history['val_accuracy'])\n",
    "except KeyError:\n",
    "    plt.plot(history.history['acc'])\n",
    "    plt.plot(history.history['val_acc'])\n",
    "plt.title('Accuracy vs. epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='lower right')\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Run this cell to plot the epoch vs loss graph\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Loss vs. epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='upper right')\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Oh no! We have overfit our dataset. You should now try to now try to mitigate this overfitting."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Reducing overfitting in the model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should now define a new regularised model.\n",
    "The specs for the regularised model are the same as our original model, with the addition of two dropout layers, weight decay, and a batch normalisation layer. \n",
    "\n",
    "In particular:\n",
    "\n",
    "* Add a dropout layer after the 3rd Dense layer\n",
    "* Then there should be two more Dense layers with 128 units before a batch normalisation layer\n",
    "* Following this, two more Dense layers with 64 units and then another Dropout layer\n",
    "* Two more Dense layers with 64 units and then the final 3-way softmax layer\n",
    "* Add weight decay (l2 kernel regularisation) in all Dense layers except the final softmax layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### GRADED CELL ####\n",
    "\n",
    "# Complete the following function. \n",
    "# Make sure to not change the function name or arguments.\n",
    "\n",
    "def get_regularised_model(input_shape, dropout_rate, weight_decay):\n",
    "    \"\"\"\n",
    "    This function should build a regularised Sequential model according to the above specification. \n",
    "    The dropout_rate argument in the function should be used to set the Dropout rate for all Dropout layers.\n",
    "    L2 kernel regularisation (weight decay) should be added using the weight_decay argument to \n",
    "    set the weight decay coefficient in all Dense layers that use L2 regularisation.\n",
    "    Ensure the weights are initialised by providing the input_shape argument in the first layer, given by the\n",
    "    function argument input_shape.\n",
    "    Your function should return the model.\n",
    "    \"\"\"\n",
    "#     model = tf.keras.Sequential([\n",
    "#         tf.keras.layers.Dense(64,activation='relu',bias_initializer='ones',kernel_regularizer=tf.keras.regularizers.l2(weight_decay),\n",
    "#                               kernel_initializer=tf.keras.initializers.he_uniform(),input_shape=input_shape),\n",
    "#         tf.keras.layers.Dense(128,activation='relu',kernel_regularizer=tf.keras.regularizers.l2(weight_decay)),\n",
    "#         tf.keras.layers.Dense(128,activation='relu',kernel_regularizer=tf.keras.regularizers.l2(weight_decay)),\n",
    "#         tf.keras.layers.Dropout(dropout_rate),\n",
    "#         tf.keras.layers.BatchNormalization(),\n",
    "#         tf.keras.layers.Dense(64,activation='relu'),\n",
    "#         tf.keras.layers.Dense(64,activation='relu'),\n",
    "#         tf.keras.layers.Dropout(dropout_rate),\n",
    "#         tf.keras.layers.Dense(3,activation='softmax')\n",
    "#     ])\n",
    "\n",
    "    model = tf.keras.Sequential([\n",
    "              tf.keras.layers.Dense(64, activation='relu', kernel_regularizer = tf.keras.regularizers.l2(weight_decay), kernel_initializer=tf.keras.initializers.he_uniform(), \n",
    "                                    bias_initializer='ones', input_shape=input_shape),\n",
    "              tf.keras.layers.Dense(128, activation='relu', kernel_regularizer = tf.keras.regularizers.l2(weight_decay)),\n",
    "              tf.keras.layers.Dense(128, activation='relu', kernel_regularizer = tf.keras.regularizers.l2(weight_decay)),\n",
    "              tf.keras.layers.Dropout(dropout_rate),\n",
    "              tf.keras.layers.Dense(128, activation='relu', kernel_regularizer = tf.keras.regularizers.l2(weight_decay)),\n",
    "              tf.keras.layers.Dense(128, activation='relu', kernel_regularizer = tf.keras.regularizers.l2(weight_decay)),\n",
    "              tf.keras.layers.BatchNormalization(),\n",
    "              tf.keras.layers.Dense(64, activation='relu', kernel_regularizer = tf.keras.regularizers.l2(weight_decay)),\n",
    "              tf.keras.layers.Dense(64, activation='relu', kernel_regularizer = tf.keras.regularizers.l2(weight_decay)),\n",
    "              tf.keras.layers.Dropout(dropout_rate),\n",
    "              tf.keras.layers.Dense(64, activation='relu', kernel_regularizer = tf.keras.regularizers.l2(weight_decay)),\n",
    "              tf.keras.layers.Dense(64, activation='relu', kernel_regularizer = tf.keras.regularizers.l2(weight_decay)),\n",
    "              tf.keras.layers.Dense(3, activation='softmax')\n",
    "    ])\n",
    "    return model\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Instantiate, compile and train the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Instantiate the model, using a dropout rate of 0.3 and weight decay coefficient of 0.001\n",
    "\n",
    "reg_model = get_regularised_model(train_data[0].shape, 0.3, 0.001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "\n",
    "compile_model(reg_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train the model\n",
    "\n",
    "reg_history = train_model(reg_model, train_data, train_targets, epochs=800)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot the learning curves\n",
    "\n",
    "Let's now plot the loss and accuracy for the training and validation sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Run this cell to plot the new accuracy vs epoch graph\n",
    "\n",
    "try:\n",
    "    plt.plot(reg_history.history['accuracy'])\n",
    "    plt.plot(reg_history.history['val_accuracy'])\n",
    "except KeyError:\n",
    "    plt.plot(reg_history.history['acc'])\n",
    "    plt.plot(reg_history.history['val_acc'])\n",
    "plt.title('Accuracy vs. epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='lower right')\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Run this cell to plot the new loss vs epoch graph\n",
    "\n",
    "plt.plot(reg_history.history['loss'])\n",
    "plt.plot(reg_history.history['val_loss'])\n",
    "plt.title('Loss vs. epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='upper right')\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the regularisation has helped to reduce the overfitting of the network.\n",
    "You will now incorporate callbacks into a new training run that implements early stopping and learning rate reduction on plateaux.\n",
    "\n",
    "Fill in the function below so that:\n",
    "\n",
    "* It creates an `EarlyStopping` callback object and a `ReduceLROnPlateau` callback object\n",
    "* The early stopping callback is used and monitors validation loss with the mode set to `\"min\"` and patience of 30.\n",
    "* The learning rate reduction on plateaux is used with a learning rate factor of 0.2 and a patience of 20."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### GRADED CELL ####\n",
    "\n",
    "# Complete the following function. \n",
    "# Make sure to not change the function name or arguments.\n",
    "\n",
    "def get_callbacks():\n",
    "    \"\"\"\n",
    "    This function should create and return a tuple (early_stopping, learning_rate_reduction) callbacks.\n",
    "    The callbacks should be instantiated according to the above requirements.\n",
    "    \"\"\"\n",
    "    early_stopping = tf.keras.callbacks.EarlyStopping(mode='min',patience=30)\n",
    "    learning_rate_reduction = tf.keras.callbacks.ReduceLROnPlateau(factor=0.2,patience=20)\n",
    "    return (early_stopping, learning_rate_reduction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the cell below to instantiate and train the regularised model with the callbacks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [],
   "source": [
    "call_model = get_regularised_model(train_data[0].shape, 0.3, 0.0001)\n",
    "compile_model(call_model)\n",
    "early_stopping, learning_rate_reduction = get_callbacks()\n",
    "call_history = call_model.fit(train_data, train_targets, epochs=800, validation_split=0.15,\n",
    "                         callbacks=[early_stopping, learning_rate_reduction], verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "learning_rate_reduction.patience"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, let's replot the accuracy and loss graphs for our new model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "try:\n",
    "    plt.plot(call_history.history['accuracy'])\n",
    "    plt.plot(call_history.history['val_accuracy'])\n",
    "except KeyError:\n",
    "    plt.plot(call_history.history['acc'])\n",
    "    plt.plot(call_history.history['val_acc'])\n",
    "plt.title('Accuracy vs. epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='lower right')\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(call_history.history['loss'])\n",
    "plt.plot(call_history.history['val_loss'])\n",
    "plt.title('Loss vs. epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='upper right')\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test loss: 0.084\n",
      "Test accuracy: 100.00%\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model on the test set\n",
    "\n",
    "test_loss, test_acc = call_model.evaluate(test_data, test_targets, verbose=0)\n",
    "print(\"Test loss: {:.3f}\\nTest accuracy: {:.2f}%\".format(test_loss, 100 * test_acc))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Congratulations for completing this programming assignment! In the next week of the course we will learn how to save and load pre-trained models."
   ]
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "tensor-flow-2-1",
   "graded_item_id": "mtZ4n",
   "launcher_item_id": "WphgK"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
