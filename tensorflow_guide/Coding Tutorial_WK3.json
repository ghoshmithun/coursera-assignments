{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "print(tf.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Validation, regularisation and callbacks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " ## Coding tutorials\n",
    " #### [1. Validation sets](#coding_tutorial_1)\n",
    " #### [2. Model regularisation](#coding_tutorial_2)\n",
    " #### [3. Introduction to callbacks](#coding_tutorial_3)\n",
    " #### [4. Early stopping / patience](#coding_tutorial_4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "<a id=\"coding_tutorial_1\"></a>\n",
    "## Validation sets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".. _diabetes_dataset:\n",
      "\n",
      "Diabetes dataset\n",
      "----------------\n",
      "\n",
      "Ten baseline variables, age, sex, body mass index, average blood\n",
      "pressure, and six blood serum measurements were obtained for each of n =\n",
      "442 diabetes patients, as well as the response of interest, a\n",
      "quantitative measure of disease progression one year after baseline.\n",
      "\n",
      "**Data Set Characteristics:**\n",
      "\n",
      "  :Number of Instances: 442\n",
      "\n",
      "  :Number of Attributes: First 10 columns are numeric predictive values\n",
      "\n",
      "  :Target: Column 11 is a quantitative measure of disease progression one year after baseline\n",
      "\n",
      "  :Attribute Information:\n",
      "      - Age\n",
      "      - Sex\n",
      "      - Body mass index\n",
      "      - Average blood pressure\n",
      "      - S1\n",
      "      - S2\n",
      "      - S3\n",
      "      - S4\n",
      "      - S5\n",
      "      - S6\n",
      "\n",
      "Note: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).\n",
      "\n",
      "Source URL:\n",
      "http://www4.stat.ncsu.edu/~boos/var.select/diabetes.html\n",
      "\n",
      "For more information see:\n",
      "Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) \"Least Angle Regression,\" Annals of Statistics (with discussion), 407-499.\n",
      "(http://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)\n"
     ]
    }
   ],
   "source": [
    "# Load the diabetes dataset\n",
    "\n",
    "from sklearn.datasets import load_diabetes\n",
    "diabetis_dataset=load_diabetes()\n",
    "\n",
    "print(diabetis_dataset['DESCR'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the input and target variables\n",
    "\n",
    "data =diabetis_dataset['data']\n",
    "targets = diabetis_dataset['target']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.47194752e-02, -1.00165882e+00, -1.44579915e-01,  6.99512942e-01,\n",
       "       -2.22496178e-01, -7.15965848e-01, -1.83538046e-01, -1.15749134e+00,\n",
       "       -5.47147277e-01,  2.05006151e+00, -6.64021672e-01, -1.07957508e+00,\n",
       "        3.48889755e-01,  4.26806019e-01, -4.43258925e-01,  2.45001404e-01,\n",
       "        1.80071184e-01, -1.05621783e-01, -7.15965848e-01,  2.06043272e-01,\n",
       "       -1.09256112e+00, -1.33929596e+00, -1.09256112e+00,  1.20596866e+00,\n",
       "        4.13819975e-01,  6.47568766e-01, -1.96524090e-01, -8.71798376e-01,\n",
       "       -2.74440354e-01,  1.69943833e+00, -3.00412442e-01, -1.20943552e+00,\n",
       "        2.45262887e+00, -8.45826288e-01, -1.13151925e+00, -6.51035629e-01,\n",
       "        1.46568953e+00,  1.60853602e+00,  1.29687096e+00, -8.06868156e-01,\n",
       "       -6.77007716e-01, -1.26137969e+00, -1.18346343e+00, -7.80896068e-01,\n",
       "        1.38777327e+00, -1.28735178e+00,  4.91736239e-01, -1.31593871e-01,\n",
       "       -1.00165882e+00, -1.31593871e-01,  3.72247006e-02,  9.46247777e-01,\n",
       "       -1.20943552e+00, -6.25063541e-01,  3.87847887e-01, -3.13398486e-01,\n",
       "       -1.30033783e+00, -1.49512849e+00,  2.32015360e-01,  2.32015360e-01,\n",
       "       -1.18346343e+00, -1.05621783e-01, -1.30033783e+00, -3.13398486e-01,\n",
       "       -1.05360299e+00,  1.41113052e-01, -2.77055191e-02, -7.15965848e-01,\n",
       "        1.02154920e-01,  3.35903711e-01, -1.35228200e+00,  1.53061975e+00,\n",
       "        6.47568766e-01, -5.34161233e-01, -8.71798376e-01, -1.43019827e+00,\n",
       "        2.32015360e-01,  6.21596678e-01,  1.29687096e+00, -5.08189145e-01,\n",
       "       -1.18607827e-01, -1.31332387e+00, -1.30033783e+00,  7.51457118e-01,\n",
       "       -1.13151925e+00, -1.44579915e-01, -1.26137969e+00, -2.35482222e-01,\n",
       "       -1.43019827e+00, -5.34161233e-01, -7.02979804e-01,  1.54099096e-01,\n",
       "       -1.35228200e+00, -7.28951892e-01, -8.06868156e-01,  1.28127008e-01,\n",
       "       -2.77055191e-02,  1.64749415e+00, -7.80896068e-01, -8.97770464e-01,\n",
       "       -3.13398486e-01, -6.51035629e-01,  1.94617316e+00,  5.95624590e-01,\n",
       "       -7.41937936e-01, -1.28735178e+00, -2.35482222e-01, -1.05621783e-01,\n",
       "        1.03715008e+00, -9.23742551e-01, -6.25063541e-01, -1.20943552e+00,\n",
       "        1.21895470e+00,  1.88124294e+00,  1.37478723e+00,  9.98191953e-01,\n",
       "        1.59554997e+00,  1.67346624e+00,  3.48889755e-01,  6.21596678e-01,\n",
       "        6.21596678e-01,  2.70973492e-01,  3.61875799e-01, -8.84784420e-01,\n",
       "       -4.04300794e-01,  1.15140964e-01, -6.89993760e-01, -5.60133321e-01,\n",
       "       -4.82217057e-01,  1.50464767e+00,  1.58256393e+00,  7.61828325e-02,\n",
       "       -5.86105409e-01, -8.97770464e-01, -6.38049585e-01,  1.55659184e+00,\n",
       "       -8.71798376e-01,  1.66048019e+00,  2.38769865e+00,  1.67346624e+00,\n",
       "       -4.43258925e-01,  2.14096382e+00,  1.07610822e+00, -1.19644947e+00,\n",
       "        2.83959536e-01,  1.38777327e+00,  3.35903711e-01, -3.13398486e-01,\n",
       "       -7.28951892e-01, -3.39370574e-01,  1.76436855e+00, -8.32840244e-01,\n",
       "        1.81631272e+00, -1.05360299e+00,  5.82638546e-01,  4.39792063e-01,\n",
       "       -1.65096101e+00, -8.84784420e-01, -7.28951892e-01,  5.56666458e-01,\n",
       "       -1.28735178e+00,  8.42359425e-01,  2.57987448e-01, -2.74440354e-01,\n",
       "        8.03401293e-01, -1.20943552e+00, -1.06658903e+00,  8.81317557e-01,\n",
       "        1.50464767e+00, -1.73343121e-03, -1.36526805e+00, -1.01464486e+00,\n",
       "        1.85527085e+00, -6.64021672e-01, -1.47194752e-02, -3.26384530e-01,\n",
       "        1.10208030e+00,  9.46247777e-01, -9.23742551e-01, -1.47194752e-02,\n",
       "       -5.86105409e-01, -1.14450530e+00, -1.83538046e-01,  4.26806019e-01,\n",
       "        1.46568953e+00, -6.64021672e-01, -1.96524090e-01, -1.18607827e-01,\n",
       "       -1.44579915e-01, -9.49714639e-01,  1.81631272e+00,  3.35903711e-01,\n",
       "       -7.93882112e-01, -4.69231013e-01, -8.58812332e-01, -3.91314750e-01,\n",
       "       -1.04061695e+00, -3.00412442e-01, -1.31593871e-01, -8.06868156e-01,\n",
       "        7.61828325e-02, -1.46915640e+00,  5.69652502e-01,  9.07289645e-01,\n",
       "        1.62152206e+00, -6.89993760e-01,  5.69652502e-01,  6.47568766e-01,\n",
       "        3.72247006e-02, -9.75686727e-01,  5.04722283e-01, -1.06658903e+00,\n",
       "       -1.02763090e+00, -1.33929596e+00, -1.13151925e+00,  1.43971745e+00,\n",
       "        1.24492679e+00,  1.86825690e+00,  8.03401293e-01,  4.26806019e-01,\n",
       "       -9.62700683e-01, -7.67910024e-01,  1.29687096e+00, -2.77055191e-02,\n",
       "       -9.75686727e-01,  7.25485030e-01, -9.75686727e-01, -5.73119365e-01,\n",
       "        1.02154920e-01, -1.28735178e+00,  8.81317557e-01,  2.42386567e-02,\n",
       "        1.38777327e+00, -8.06868156e-01,  1.21895470e+00, -3.65342662e-01,\n",
       "       -1.10554717e+00, -1.04061695e+00,  1.36180118e+00,  1.42673140e+00,\n",
       "        1.59554997e+00,  3.22917667e-01, -1.05360299e+00, -1.36526805e+00,\n",
       "        4.52778107e-01, -3.52356618e-01, -9.62700683e-01, -1.31332387e+00,\n",
       "        1.37478723e+00,  8.16387337e-01,  1.95915920e+00,  1.17999657e+00,\n",
       "       -7.93882112e-01, -2.77055191e-02,  2.05006151e+00,  1.12526127e-02,\n",
       "        2.51755909e+00, -1.15749134e+00, -8.19854200e-01, -1.32630991e+00,\n",
       "       -1.46915640e+00, -6.38049585e-01,  2.02408942e+00, -4.69231013e-01,\n",
       "       -9.26357388e-02, -1.01464486e+00, -1.39124013e+00, -4.82217057e-01,\n",
       "        1.45270349e+00, -8.45826288e-01,  6.47568766e-01, -3.26384530e-01,\n",
       "        3.87847887e-01,  1.15402448e+00, -1.11853321e+00, -7.54923980e-01,\n",
       "        1.69943833e+00, -1.14450530e+00, -6.51035629e-01,  6.21596678e-01,\n",
       "        1.46568953e+00, -7.54923980e-01,  1.01117800e+00,  3.74861843e-01,\n",
       "        5.02107446e-02,  1.05013613e+00, -1.19644947e+00,  8.68331513e-01,\n",
       "       -9.36728595e-01, -1.09256112e+00,  2.33575448e+00,  1.24492679e+00,\n",
       "       -8.84784420e-01,  6.21596678e-01, -1.26137969e+00, -8.71798376e-01,\n",
       "       -8.19854200e-01, -1.57304475e+00, -3.00412442e-01, -8.97770464e-01,\n",
       "        1.59554997e+00, -1.13151925e+00,  5.95624590e-01,  1.08909426e+00,\n",
       "        1.30985701e+00, -3.65342662e-01, -1.40422618e+00,  2.57987448e-01,\n",
       "       -4.95203101e-01, -1.31593871e-01, -5.60133321e-01,  3.61875799e-01,\n",
       "       -1.05621783e-01,  1.41113052e-01, -6.66636509e-02, -7.15965848e-01,\n",
       "        8.81317557e-01,  4.91736239e-01, -5.60133321e-01,  5.04722283e-01,\n",
       "       -3.91314750e-01,  1.01117800e+00,  1.16701052e+00,  1.24492679e+00,\n",
       "        1.25791283e+00,  5.17708327e-01, -2.74440354e-01,  1.10208030e+00,\n",
       "       -9.62700683e-01, -2.22496178e-01,  1.19298261e+00,  6.08610634e-01,\n",
       "        1.53061975e+00,  1.54099096e-01, -1.04061695e+00, -7.28951892e-01,\n",
       "        1.99811734e+00, -7.93882112e-01,  8.03401293e-01, -7.41937936e-01,\n",
       "        8.29373381e-01,  1.43971745e+00,  3.35903711e-01, -5.08189145e-01,\n",
       "        6.21596678e-01, -1.70552003e-01, -1.70552003e-01, -8.32840244e-01,\n",
       "       -5.36776070e-02, -8.32840244e-01,  1.17999657e+00, -1.05360299e+00,\n",
       "       -9.75686727e-01, -5.60133321e-01,  1.55659184e+00, -1.19644947e+00,\n",
       "       -1.27436574e+00,  8.94303601e-01, -8.06868156e-01,  2.06304756e+00,\n",
       "        1.67346624e+00,  3.87847887e-01,  2.19290800e+00, -1.22242156e+00,\n",
       "        1.42673140e+00,  6.99512942e-01,  1.05013613e+00,  1.16701052e+00,\n",
       "       -3.78328706e-01,  1.93057228e-01, -1.15749134e+00,  5.82638546e-01,\n",
       "       -1.05360299e+00,  2.06043272e-01, -1.57565959e-01,  8.42359425e-01,\n",
       "       -4.04300794e-01,  1.07610822e+00,  1.20596866e+00, -1.45617035e+00,\n",
       "       -1.30033783e+00, -6.25063541e-01, -2.61454310e-01, -8.32840244e-01,\n",
       "       -1.07957508e+00,  8.68331513e-01, -1.04061695e+00,  6.34582722e-01,\n",
       "       -5.47147277e-01, -1.31332387e+00,  1.62152206e+00, -1.15749134e+00,\n",
       "       -4.43258925e-01, -1.07957508e+00,  1.56957789e+00,  1.37478723e+00,\n",
       "       -1.41721222e+00,  5.95624590e-01,  1.16701052e+00,  1.03715008e+00,\n",
       "        2.96945580e-01, -7.67910024e-01,  2.06043272e-01,  1.59554997e+00,\n",
       "        1.82929877e+00,  1.67346624e+00, -1.04061695e+00, -1.57565959e-01,\n",
       "        4.78750195e-01,  3.74861843e-01,  7.38471074e-01, -2.09510134e-01,\n",
       "        1.41374536e+00, -5.08189145e-01, -2.74440354e-01,  2.83959536e-01,\n",
       "        1.36180118e+00, -1.26137969e+00, -8.84784420e-01, -1.43019827e+00,\n",
       "       -7.96496949e-02,  7.77429206e-01,  1.05013613e+00, -7.93882112e-01,\n",
       "       -5.34161233e-01, -1.73343121e-03, -4.17286837e-01, -1.10554717e+00,\n",
       "        2.05006151e+00, -7.54923980e-01,  4.00833931e-01, -1.11853321e+00,\n",
       "        2.70973492e-01, -1.04061695e+00, -1.33929596e+00, -1.14450530e+00,\n",
       "       -1.35228200e+00,  3.35903711e-01, -6.25063541e-01, -2.61454310e-01,\n",
       "        8.81317557e-01, -1.23540761e+00])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Normalise the target data (this will make clearer training curves)\n",
    "targets =(targets - targets.mean(axis=0)) /targets.std()\n",
    "\n",
    "targets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(397, 10)\n",
      "(45, 10)\n",
      "(397,)\n",
      "(45,)\n"
     ]
    }
   ],
   "source": [
    "# Split the data into train and test sets\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train_data, test_data, train_targets, test_targets = train_test_split(data,targets,test_size=0.1)\n",
    "\n",
    "print(train_data.shape)\n",
    "print(test_data.shape)\n",
    "print(train_targets.shape)\n",
    "print(test_targets.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Train a feedforward neural network model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Build the model\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "\n",
    "def get_model():\n",
    "    model =Sequential([\n",
    "        Dense(128,activation='relu',input_shape=(train_data.shape[1],)),\n",
    "        Dense(128,activation='relu'),\n",
    "        Dense(128,activation='relu'),\n",
    "        Dense(128,activation='relu'),\n",
    "        Dense(128,activation='relu'),\n",
    "        Dense(128,activation='relu'),\n",
    "        Dense(1)\n",
    "    ])\n",
    "    return model\n",
    "\n",
    "model=get_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense (Dense)                (None, 128)               1408      \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 128)               16512     \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 128)               16512     \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 128)               16512     \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 128)               16512     \n",
      "_________________________________________________________________\n",
      "dense_5 (Dense)              (None, 128)               16512     \n",
      "_________________________________________________________________\n",
      "dense_6 (Dense)              (None, 1)                 129       \n",
      "=================================================================\n",
      "Total params: 84,097\n",
      "Trainable params: 84,097\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# Print the model summary\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(optimizer='adam',loss='mse',metrics=['mae'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train the model, with some of the data reserved for validation\n",
    "\n",
    "history=model.fit(train_data,train_targets,epochs=100,validation_split=0.15,batch_size=64,verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45/1 - 0s - loss: 0.8453 - mae: 0.7395\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.9129177278942532, 0.7395167]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluate the model on the test set\n",
    "\n",
    "model.evaluate(test_data,test_targets,verbose=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot the learning curves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the training and validation loss\n",
    "\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Loss vs. epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "<a id=\"coding_tutorial_2\"></a>\n",
    "## Model regularisation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Adding regularisation with weight decay and dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Dropout\n",
    "from tensorflow.keras import regularizers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_regularised_model(wd, rate):\n",
    "    \"\"\"\n",
    "    wd: weightdecay\n",
    "    rate : regulizer rate\n",
    "    \"\"\"\n",
    "    model = Sequential([\n",
    "        Dense(128, activation=\"relu\", kernel_regularizer=regularizers.l2(wd), input_shape=(train_data.shape[1],)),\n",
    "        Dropout(rate), \n",
    "        Dense(128,kernel_regularizer=regularizers.l2(wd), activation=\"relu\"),\n",
    "        Dropout(rate),\n",
    "        Dense(128, kernel_regularizer=regularizers.l2(wd), activation=\"relu\"),\n",
    "        Dropout(rate),\n",
    "        Dense(128, kernel_regularizer=regularizers.l2(wd), activation=\"relu\"),\n",
    "        Dropout(rate),\n",
    "        Dense(128, kernel_regularizer=regularizers.l2(wd), activation=\"relu\"),\n",
    "        Dropout(rate),\n",
    "        Dense(128, kernel_regularizer=regularizers.l2(wd), activation=\"relu\"),\n",
    "        Dropout(rate),\n",
    "        Dense(1)\n",
    "    ])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Re-build the model with weight decay and dropout layers\n",
    "\n",
    "model=get_regularised_model(1e-5,0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(optimizer='adam',loss='mse',metrics=['mae'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 337 samples, validate on 60 samples\n",
      "Epoch 1/100\n",
      "337/337 - 2s - loss: 0.9823 - mae: 0.8463 - val_loss: 1.1319 - val_mae: 0.9156\n",
      "Epoch 2/100\n",
      "337/337 - 0s - loss: 0.9710 - mae: 0.8425 - val_loss: 1.0955 - val_mae: 0.9029\n",
      "Epoch 3/100\n",
      "337/337 - 0s - loss: 0.9304 - mae: 0.8280 - val_loss: 0.9986 - val_mae: 0.8647\n",
      "Epoch 4/100\n",
      "337/337 - 0s - loss: 0.8490 - mae: 0.7969 - val_loss: 0.7950 - val_mae: 0.7791\n",
      "Epoch 5/100\n",
      "337/337 - 0s - loss: 0.6871 - mae: 0.6997 - val_loss: 0.6267 - val_mae: 0.6641\n",
      "Epoch 6/100\n",
      "337/337 - 0s - loss: 0.6364 - mae: 0.6383 - val_loss: 0.5840 - val_mae: 0.5860\n",
      "Epoch 7/100\n",
      "337/337 - 0s - loss: 0.6572 - mae: 0.6599 - val_loss: 0.5805 - val_mae: 0.6355\n",
      "Epoch 8/100\n",
      "337/337 - 0s - loss: 0.6108 - mae: 0.6447 - val_loss: 0.6356 - val_mae: 0.6777\n",
      "Epoch 9/100\n",
      "337/337 - 0s - loss: 0.5796 - mae: 0.6374 - val_loss: 0.5566 - val_mae: 0.6222\n",
      "Epoch 10/100\n",
      "337/337 - 0s - loss: 0.5663 - mae: 0.6388 - val_loss: 0.5376 - val_mae: 0.5860\n",
      "Epoch 11/100\n",
      "337/337 - 0s - loss: 0.5250 - mae: 0.5886 - val_loss: 0.5072 - val_mae: 0.5356\n",
      "Epoch 12/100\n",
      "337/337 - 0s - loss: 0.5441 - mae: 0.5931 - val_loss: 0.5571 - val_mae: 0.5595\n",
      "Epoch 13/100\n",
      "337/337 - 0s - loss: 0.5377 - mae: 0.6022 - val_loss: 0.5116 - val_mae: 0.5585\n",
      "Epoch 14/100\n",
      "337/337 - 0s - loss: 0.5290 - mae: 0.5857 - val_loss: 0.5307 - val_mae: 0.5525\n",
      "Epoch 15/100\n",
      "337/337 - 0s - loss: 0.5234 - mae: 0.5851 - val_loss: 0.5120 - val_mae: 0.5375\n",
      "Epoch 16/100\n",
      "337/337 - 0s - loss: 0.5271 - mae: 0.5925 - val_loss: 0.4913 - val_mae: 0.5276\n",
      "Epoch 17/100\n",
      "337/337 - 0s - loss: 0.5204 - mae: 0.5982 - val_loss: 0.5010 - val_mae: 0.5419\n",
      "Epoch 18/100\n",
      "337/337 - 0s - loss: 0.5111 - mae: 0.5866 - val_loss: 0.5105 - val_mae: 0.5547\n",
      "Epoch 19/100\n",
      "337/337 - 0s - loss: 0.5107 - mae: 0.5821 - val_loss: 0.4898 - val_mae: 0.5351\n",
      "Epoch 20/100\n",
      "337/337 - 0s - loss: 0.4934 - mae: 0.5660 - val_loss: 0.5143 - val_mae: 0.5303\n",
      "Epoch 21/100\n",
      "337/337 - 0s - loss: 0.5062 - mae: 0.5754 - val_loss: 0.4995 - val_mae: 0.5309\n",
      "Epoch 22/100\n",
      "337/337 - 0s - loss: 0.4826 - mae: 0.5673 - val_loss: 0.5245 - val_mae: 0.5596\n",
      "Epoch 23/100\n",
      "337/337 - 0s - loss: 0.5112 - mae: 0.5825 - val_loss: 0.4932 - val_mae: 0.5454\n",
      "Epoch 24/100\n",
      "337/337 - 0s - loss: 0.5016 - mae: 0.5889 - val_loss: 0.4762 - val_mae: 0.5166\n",
      "Epoch 25/100\n",
      "337/337 - 0s - loss: 0.4883 - mae: 0.5711 - val_loss: 0.4929 - val_mae: 0.5186\n",
      "Epoch 26/100\n",
      "337/337 - 0s - loss: 0.4838 - mae: 0.5639 - val_loss: 0.4682 - val_mae: 0.5176\n",
      "Epoch 27/100\n",
      "337/337 - 0s - loss: 0.4841 - mae: 0.5662 - val_loss: 0.5243 - val_mae: 0.5431\n",
      "Epoch 28/100\n",
      "337/337 - 0s - loss: 0.4776 - mae: 0.5527 - val_loss: 0.4675 - val_mae: 0.5087\n",
      "Epoch 29/100\n",
      "337/337 - 0s - loss: 0.4820 - mae: 0.5550 - val_loss: 0.5026 - val_mae: 0.5173\n",
      "Epoch 30/100\n",
      "337/337 - 0s - loss: 0.4977 - mae: 0.5649 - val_loss: 0.5437 - val_mae: 0.5553\n",
      "Epoch 31/100\n",
      "337/337 - 0s - loss: 0.4686 - mae: 0.5645 - val_loss: 0.4895 - val_mae: 0.5182\n",
      "Epoch 32/100\n",
      "337/337 - 0s - loss: 0.4242 - mae: 0.5273 - val_loss: 0.5064 - val_mae: 0.5175\n",
      "Epoch 33/100\n",
      "337/337 - 0s - loss: 0.4924 - mae: 0.5591 - val_loss: 0.5217 - val_mae: 0.5390\n",
      "Epoch 34/100\n",
      "337/337 - 0s - loss: 0.4551 - mae: 0.5496 - val_loss: 0.4731 - val_mae: 0.5296\n",
      "Epoch 35/100\n",
      "337/337 - 0s - loss: 0.4867 - mae: 0.5693 - val_loss: 0.5235 - val_mae: 0.5432\n",
      "Epoch 36/100\n",
      "337/337 - 0s - loss: 0.4692 - mae: 0.5529 - val_loss: 0.4884 - val_mae: 0.5174\n",
      "Epoch 37/100\n",
      "337/337 - 0s - loss: 0.4448 - mae: 0.5354 - val_loss: 0.4875 - val_mae: 0.5132\n",
      "Epoch 38/100\n",
      "337/337 - 0s - loss: 0.4341 - mae: 0.5405 - val_loss: 0.4871 - val_mae: 0.5221\n",
      "Epoch 39/100\n",
      "337/337 - 0s - loss: 0.4549 - mae: 0.5511 - val_loss: 0.4996 - val_mae: 0.5298\n",
      "Epoch 40/100\n",
      "337/337 - 0s - loss: 0.4524 - mae: 0.5414 - val_loss: 0.4731 - val_mae: 0.5018\n",
      "Epoch 41/100\n",
      "337/337 - 0s - loss: 0.4457 - mae: 0.5482 - val_loss: 0.4715 - val_mae: 0.4980\n",
      "Epoch 42/100\n",
      "337/337 - 0s - loss: 0.4401 - mae: 0.5268 - val_loss: 0.5030 - val_mae: 0.5187\n",
      "Epoch 43/100\n",
      "337/337 - 0s - loss: 0.4481 - mae: 0.5383 - val_loss: 0.4812 - val_mae: 0.5128\n",
      "Epoch 44/100\n",
      "337/337 - 0s - loss: 0.4460 - mae: 0.5449 - val_loss: 0.5082 - val_mae: 0.5173\n",
      "Epoch 45/100\n",
      "337/337 - 0s - loss: 0.4467 - mae: 0.5494 - val_loss: 0.4902 - val_mae: 0.5227\n",
      "Epoch 46/100\n",
      "337/337 - 0s - loss: 0.4261 - mae: 0.5297 - val_loss: 0.4849 - val_mae: 0.5150\n",
      "Epoch 47/100\n",
      "337/337 - 0s - loss: 0.4349 - mae: 0.5335 - val_loss: 0.4922 - val_mae: 0.5040\n",
      "Epoch 48/100\n",
      "337/337 - 0s - loss: 0.4051 - mae: 0.5092 - val_loss: 0.4972 - val_mae: 0.5074\n",
      "Epoch 49/100\n",
      "337/337 - 0s - loss: 0.4163 - mae: 0.5068 - val_loss: 0.4986 - val_mae: 0.5069\n",
      "Epoch 50/100\n",
      "337/337 - 0s - loss: 0.4242 - mae: 0.5245 - val_loss: 0.5184 - val_mae: 0.5181\n",
      "Epoch 51/100\n",
      "337/337 - 0s - loss: 0.4149 - mae: 0.5172 - val_loss: 0.4754 - val_mae: 0.5053\n",
      "Epoch 52/100\n",
      "337/337 - 0s - loss: 0.4458 - mae: 0.5382 - val_loss: 0.4964 - val_mae: 0.5059\n",
      "Epoch 53/100\n",
      "337/337 - 0s - loss: 0.4236 - mae: 0.5216 - val_loss: 0.5079 - val_mae: 0.5221\n",
      "Epoch 54/100\n",
      "337/337 - 0s - loss: 0.4203 - mae: 0.5262 - val_loss: 0.5002 - val_mae: 0.5187\n",
      "Epoch 55/100\n",
      "337/337 - 0s - loss: 0.4289 - mae: 0.5330 - val_loss: 0.4952 - val_mae: 0.4976\n",
      "Epoch 56/100\n",
      "337/337 - 0s - loss: 0.4044 - mae: 0.5087 - val_loss: 0.5325 - val_mae: 0.5128\n",
      "Epoch 57/100\n",
      "337/337 - 0s - loss: 0.4036 - mae: 0.5027 - val_loss: 0.4992 - val_mae: 0.4992\n",
      "Epoch 58/100\n",
      "337/337 - 0s - loss: 0.3862 - mae: 0.5094 - val_loss: 0.4955 - val_mae: 0.5077\n",
      "Epoch 59/100\n",
      "337/337 - 0s - loss: 0.4016 - mae: 0.5061 - val_loss: 0.5122 - val_mae: 0.5133\n",
      "Epoch 60/100\n",
      "337/337 - 0s - loss: 0.3784 - mae: 0.4946 - val_loss: 0.5048 - val_mae: 0.4961\n",
      "Epoch 61/100\n",
      "337/337 - 0s - loss: 0.4182 - mae: 0.5191 - val_loss: 0.5010 - val_mae: 0.4937\n",
      "Epoch 62/100\n",
      "337/337 - 0s - loss: 0.4199 - mae: 0.5105 - val_loss: 0.5037 - val_mae: 0.5110\n",
      "Epoch 63/100\n",
      "337/337 - 0s - loss: 0.3864 - mae: 0.5044 - val_loss: 0.4899 - val_mae: 0.4999\n",
      "Epoch 64/100\n",
      "337/337 - 0s - loss: 0.3804 - mae: 0.4967 - val_loss: 0.5254 - val_mae: 0.5122\n",
      "Epoch 65/100\n",
      "337/337 - 0s - loss: 0.3960 - mae: 0.5031 - val_loss: 0.5043 - val_mae: 0.5057\n",
      "Epoch 66/100\n",
      "337/337 - 0s - loss: 0.3842 - mae: 0.5023 - val_loss: 0.4949 - val_mae: 0.5062\n",
      "Epoch 67/100\n",
      "337/337 - 0s - loss: 0.4050 - mae: 0.5115 - val_loss: 0.5147 - val_mae: 0.5075\n",
      "Epoch 68/100\n",
      "337/337 - 0s - loss: 0.3720 - mae: 0.4831 - val_loss: 0.5023 - val_mae: 0.5068\n",
      "Epoch 69/100\n",
      "337/337 - 0s - loss: 0.3782 - mae: 0.4988 - val_loss: 0.5027 - val_mae: 0.4973\n",
      "Epoch 70/100\n",
      "337/337 - 0s - loss: 0.3672 - mae: 0.4900 - val_loss: 0.5173 - val_mae: 0.5017\n",
      "Epoch 71/100\n",
      "337/337 - 0s - loss: 0.4044 - mae: 0.5076 - val_loss: 0.5489 - val_mae: 0.5190\n",
      "Epoch 72/100\n",
      "337/337 - 0s - loss: 0.4138 - mae: 0.5111 - val_loss: 0.5019 - val_mae: 0.5110\n",
      "Epoch 73/100\n",
      "337/337 - 0s - loss: 0.4108 - mae: 0.5126 - val_loss: 0.5313 - val_mae: 0.5130\n",
      "Epoch 74/100\n",
      "337/337 - 0s - loss: 0.4023 - mae: 0.5003 - val_loss: 0.5181 - val_mae: 0.5133\n",
      "Epoch 75/100\n",
      "337/337 - 0s - loss: 0.3834 - mae: 0.4846 - val_loss: 0.4912 - val_mae: 0.4999\n",
      "Epoch 76/100\n",
      "337/337 - 0s - loss: 0.3650 - mae: 0.4933 - val_loss: 0.5055 - val_mae: 0.5040\n",
      "Epoch 77/100\n",
      "337/337 - 0s - loss: 0.3634 - mae: 0.4808 - val_loss: 0.5488 - val_mae: 0.5180\n",
      "Epoch 78/100\n",
      "337/337 - 0s - loss: 0.3704 - mae: 0.4770 - val_loss: 0.5016 - val_mae: 0.4962\n",
      "Epoch 79/100\n",
      "337/337 - 0s - loss: 0.3655 - mae: 0.4841 - val_loss: 0.5357 - val_mae: 0.5188\n",
      "Epoch 80/100\n",
      "337/337 - 0s - loss: 0.3689 - mae: 0.4951 - val_loss: 0.5101 - val_mae: 0.5115\n",
      "Epoch 81/100\n",
      "337/337 - 0s - loss: 0.3435 - mae: 0.4680 - val_loss: 0.5301 - val_mae: 0.5110\n",
      "Epoch 82/100\n",
      "337/337 - 0s - loss: 0.3569 - mae: 0.4653 - val_loss: 0.5467 - val_mae: 0.5226\n",
      "Epoch 83/100\n",
      "337/337 - 0s - loss: 0.3597 - mae: 0.4800 - val_loss: 0.5350 - val_mae: 0.5101\n",
      "Epoch 84/100\n",
      "337/337 - 0s - loss: 0.3760 - mae: 0.4826 - val_loss: 0.5778 - val_mae: 0.5234\n",
      "Epoch 85/100\n",
      "337/337 - 0s - loss: 0.4131 - mae: 0.5082 - val_loss: 0.5139 - val_mae: 0.5280\n",
      "Epoch 86/100\n",
      "337/337 - 0s - loss: 0.4099 - mae: 0.5204 - val_loss: 0.5112 - val_mae: 0.5224\n",
      "Epoch 87/100\n",
      "337/337 - 0s - loss: 0.3463 - mae: 0.4708 - val_loss: 0.5468 - val_mae: 0.5168\n",
      "Epoch 88/100\n",
      "337/337 - 0s - loss: 0.3407 - mae: 0.4538 - val_loss: 0.5322 - val_mae: 0.5077\n",
      "Epoch 89/100\n",
      "337/337 - 0s - loss: 0.3289 - mae: 0.4617 - val_loss: 0.5446 - val_mae: 0.5181\n",
      "Epoch 90/100\n",
      "337/337 - 0s - loss: 0.3585 - mae: 0.4801 - val_loss: 0.5226 - val_mae: 0.5124\n",
      "Epoch 91/100\n",
      "337/337 - 0s - loss: 0.3543 - mae: 0.4858 - val_loss: 0.5420 - val_mae: 0.5188\n",
      "Epoch 92/100\n",
      "337/337 - 0s - loss: 0.3510 - mae: 0.4751 - val_loss: 0.5185 - val_mae: 0.4910\n",
      "Epoch 93/100\n",
      "337/337 - 0s - loss: 0.3421 - mae: 0.4685 - val_loss: 0.5424 - val_mae: 0.5021\n",
      "Epoch 94/100\n",
      "337/337 - 0s - loss: 0.3503 - mae: 0.4614 - val_loss: 0.5423 - val_mae: 0.5138\n",
      "Epoch 95/100\n",
      "337/337 - 0s - loss: 0.3611 - mae: 0.4864 - val_loss: 0.5125 - val_mae: 0.5061\n",
      "Epoch 96/100\n",
      "337/337 - 0s - loss: 0.3588 - mae: 0.4793 - val_loss: 0.5598 - val_mae: 0.5190\n",
      "Epoch 97/100\n",
      "337/337 - 0s - loss: 0.3452 - mae: 0.4694 - val_loss: 0.5325 - val_mae: 0.5022\n",
      "Epoch 98/100\n",
      "337/337 - 0s - loss: 0.3559 - mae: 0.4877 - val_loss: 0.5486 - val_mae: 0.5070\n",
      "Epoch 99/100\n",
      "337/337 - 0s - loss: 0.3497 - mae: 0.4708 - val_loss: 0.5512 - val_mae: 0.5143\n",
      "Epoch 100/100\n",
      "337/337 - 0s - loss: 0.3478 - mae: 0.4681 - val_loss: 0.5312 - val_mae: 0.5010\n"
     ]
    }
   ],
   "source": [
    "# Train the model, with some of the data reserved for validation\n",
    "\n",
    "history = model.fit(train_data, train_targets, epochs=100, validation_split=0.15,batch_size=64,verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45/1 - 0s - loss: 0.7289 - mae: 0.7177\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.7860311243269179, 0.71771884]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluate the model on the test set\n",
    "\n",
    "model.evaluate(test_data,test_targets,verbose=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot the learning curves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the training and validation loss\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('Loss vs. epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "<a id=\"coding_tutorial_3\"></a>\n",
    "## Introduction to callbacks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Example training callback"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write a custom callback\n",
    "from tensorflow.keras.callbacks import Callback\n",
    "\n",
    "class TrainingCallback(Callback):\n",
    "    def on_train_begin(self, logs=None):\n",
    "        print(\"Started training ...........\")\n",
    "        \n",
    "    def on_epoch_begin(self, epoch, logs=None):\n",
    "        print(f\"Training: Started epoch {epoch}\")\n",
    "        \n",
    "    def on_train_batch_begin(self, batch, logs=None):\n",
    "        print(f\"Traing: Started batch {batch}\")\n",
    "    \n",
    "    def on_train_batch_end(self, batch, logs=None):\n",
    "        print(f\"Training: Finished batch {batch}\")\n",
    "    \n",
    "    def on_epoch_end(self, epoch, logs=None):\n",
    "        print(f\"Training: Finished epoch {epoch}\")\n",
    "        \n",
    "    def on_train_end(self, logs=None):\n",
    "        print(\"Finished Trainings\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Re-build the model\n",
    "model =get_regularised_model(1e-5,0.3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(optimizer='adam', loss='mse')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Train the model with the callback"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Started training ...........\n",
      "Training: Started epoch 0\n",
      "Traing: Started batch 0\n",
      "Training: Finished batch 0\n",
      "Traing: Started batch 1\n",
      "Training: Finished batch 1\n",
      "Traing: Started batch 2\n",
      "Training: Finished batch 2\n",
      "Traing: Started batch 3\n",
      "Training: Finished batch 3\n",
      "Training: Finished epoch 0\n",
      "Training: Started epoch 1\n",
      "Traing: Started batch 0\n",
      "Training: Finished batch 0\n",
      "Traing: Started batch 1\n",
      "Training: Finished batch 1\n",
      "Traing: Started batch 2\n",
      "Training: Finished batch 2\n",
      "Traing: Started batch 3\n",
      "Training: Finished batch 3\n",
      "Training: Finished epoch 1\n",
      "Training: Started epoch 2\n",
      "Traing: Started batch 0\n",
      "Training: Finished batch 0\n",
      "Traing: Started batch 1\n",
      "Training: Finished batch 1\n",
      "Traing: Started batch 2\n",
      "Training: Finished batch 2\n",
      "Traing: Started batch 3\n",
      "Training: Finished batch 3\n",
      "Training: Finished epoch 2\n",
      "Finished Trainings\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7fe57865a390>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train the model, with some of the data reserved for validation\n",
    "\n",
    "model.fit(train_data,train_targets,epochs=3,batch_size=128,verbose=False,callbacks=[TrainingCallback()])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "class PredictionCallback(Callback):\n",
    "    def on_train_begin(self, logs=None):\n",
    "        print(\"Started training ...........\")\n",
    "        \n",
    "    def on_predict_begin(self, epoch, logs=None):\n",
    "        print(f\"Training: Started epoch {epoch}\")\n",
    "        \n",
    "    def on_predict_batch_begin(self, batch, logs=None):\n",
    "        print(f\"Traing: Started batch {batch}\")\n",
    "    \n",
    "    def on_predict_batch_end(self, batch, logs=None):\n",
    "        print(f\"Training: Finished batch {batch}\")\n",
    "    \n",
    "    def on_epoch_end(self, epoch, logs=None):\n",
    "        print(f\"Training: Finished epoch {epoch}\")\n",
    "        \n",
    "    def on_predict_end(self, logs=None):\n",
    "        print(\"Finished Trainings\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.975818379720052"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluate the model\n",
    "\n",
    "model.evaluate(test_data,test_targets,verbose=False,callbacks=[PredictionCallback()])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training: Started epoch None\n",
      "Traing: Started batch 0\n",
      "Training: Finished batch 0\n",
      "Traing: Started batch 1\n",
      "Training: Finished batch 1\n",
      "Finished Trainings\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.08981404],\n",
       "       [0.07674774],\n",
       "       [0.07114659],\n",
       "       [0.12170973],\n",
       "       [0.05119232],\n",
       "       [0.08252479],\n",
       "       [0.03671188],\n",
       "       [0.05462884],\n",
       "       [0.05009637],\n",
       "       [0.09524835],\n",
       "       [0.04922935],\n",
       "       [0.03098277],\n",
       "       [0.06742433],\n",
       "       [0.07430817],\n",
       "       [0.06436381],\n",
       "       [0.07332201],\n",
       "       [0.01623436],\n",
       "       [0.02739361],\n",
       "       [0.10624512],\n",
       "       [0.04576943],\n",
       "       [0.01381718],\n",
       "       [0.03192407],\n",
       "       [0.03682059],\n",
       "       [0.09332906],\n",
       "       [0.05102396],\n",
       "       [0.0339631 ],\n",
       "       [0.07528406],\n",
       "       [0.03181935],\n",
       "       [0.00922684],\n",
       "       [0.01051374],\n",
       "       [0.05119175],\n",
       "       [0.06769495],\n",
       "       [0.08398069],\n",
       "       [0.01521333],\n",
       "       [0.08067972],\n",
       "       [0.1428812 ],\n",
       "       [0.01132052],\n",
       "       [0.05940363],\n",
       "       [0.05497785],\n",
       "       [0.043938  ],\n",
       "       [0.05633472],\n",
       "       [0.05080283],\n",
       "       [0.01054156],\n",
       "       [0.04819264],\n",
       "       [0.09992004]], dtype=float32)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Make predictions with the model\n",
    "\n",
    "model.predict(test_data,verbose=False,callbacks=[PredictionCallback()])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "<a id=\"coding_tutorial_4\"></a>\n",
    "## Early stopping / patience"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Re-train the models with early stopping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "# Re-train the unregularised model\n",
    "unregularized_model =get_model()\n",
    "unregularized_model.compile(optimizer='adam',loss='mae')\n",
    "unreg_history =unregularized_model.fit(train_data,train_targets,epochs=100,validation_split=0.15,\n",
    "                                      batch_size=64, verbose=False,\n",
    "                                      callbacks=[tf.keras.callbacks.EarlyStopping()])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45/1 - 0s - loss: 0.7352\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.6489998552534315"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluate the model on the test set\n",
    "unregularized_model.evaluate(test_data,test_targets,verbose=2,)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Re-train the regularised model\n",
    "regularized_model=get_regularised_model(1e-8,0.2)\n",
    "regularized_model.compile(optimizer='adam',loss='mae')\n",
    "reg_history =regularized_model.fit(train_data,train_targets,epochs=100,verbose=False,\n",
    "                                  validation_split=0.15,batch_size=64,\n",
    "                            callbacks=[tf.keras.callbacks.EarlyStopping(patience=2)])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45/1 - 0s - loss: 0.7275\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.6603631761338976"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluate the model on the test set\n",
    "\n",
    "regularized_model.evaluate(test_data,test_targets,verbose=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot the learning curves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the training and validation loss\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig = plt.figure(figsize=(12, 5))\n",
    "\n",
    "fig.add_subplot(121)\n",
    "\n",
    "plt.plot(unreg_history.history['loss'])\n",
    "plt.plot(unreg_history.history['val_loss'])\n",
    "plt.title('Unregularised model: loss vs. epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='upper right')\n",
    "\n",
    "fig.add_subplot(122)\n",
    "\n",
    "plt.plot(reg_history.history['loss'])\n",
    "plt.plot(reg_history.history['val_loss'])\n",
    "plt.title('Regularised model: loss vs. epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['Training', 'Validation'], loc='upper right')\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
