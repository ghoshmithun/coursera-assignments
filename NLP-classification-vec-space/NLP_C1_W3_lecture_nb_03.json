{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Another explanation about PCA\n",
    "\n",
    "\n",
    "<img src = 'pca.jpeg' width=\"width\" height=\"height\"/>\n",
    "<sub>photo credit: Raunak Joshi</sub>\n",
    "\n",
    "\n",
    "In this lab, we are going to view another explanation about Principal Component Analysis(PCA). PCA is a statistical technique invented in 1901 by Karl Pearson that uses orthogonal transformations to map a set of variables into a set of linearly uncorrelated variables called Principal Components. \n",
    "\n",
    "PCA is based on the Singular Value Decomposition(SVD) of the Covariance Matrix of the original dataset. The Eigenvectors of such decomposition are used as a rotation matrix.  The Eigenvectors are arranged in the rotation matrix in decreasing order according to its explained variance. This last term is related to the EigenValues of the SVD.\n",
    "\n",
    "PCA is a potent technique with applications ranging from simple space transformation, dimensionality reduction, and mixture separation from spectral information.\n",
    "\n",
    "Follow this lab to view another explanation for PCA. In this case, we are going to use the concept of rotation matrices applied to correlated random data, just as illustrated in the next picture.\n",
    "\n",
    "<img src=GaussianScatterPCA.svg>\n",
    "\n",
    "Source: https://en.wikipedia.org/wiki/Principal_component_analysis\n",
    "\n",
    "As usual, we must import the libraries that will use in this lab."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np                         # Linear algebra library\n",
    "import matplotlib.pyplot as plt            # library for visualization\n",
    "from sklearn.decomposition import PCA      # PCA library\n",
    "import pandas as pd                        # Data frame library\n",
    "import math                                # Library for math functions\n",
    "import random                              # Library for pseudo random numbers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To start, let us consider a pair of random variables x, y. Consider the base case when y = n * x. The x and y variables will be perfectly correlated to each other since y is just a scaling of x."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n = 1  # The amount of the correlation\n",
    "x = np.random.uniform(1,2,1000) # Generate 1000 samples from a uniform random variable\n",
    "y = x.copy() * n # Make y = n * x\n",
    "\n",
    "# PCA works better if the data is centered\n",
    "x = x - np.mean(x) # Center x. Remove its mean\n",
    "y = y - np.mean(y) # Center y. Remove its mean\n",
    "\n",
    "data = pd.DataFrame({'x': x, 'y': y}) # Create a data frame with x and y\n",
    "plt.scatter(data.x, data.y) # Plot the original correlated data in blue\n",
    "\n",
    "pca = PCA(n_components=2) # Instantiate a PCA. Choose to get 2 output variables\n",
    "\n",
    "# Create the transformation model for this data. Internally, it gets the rotation \n",
    "# matrix and the explained variance\n",
    "pcaTr = pca.fit(data)\n",
    "\n",
    "rotatedData = pcaTr.transform(data) # Transform the data base on the rotation matrix of pcaTr\n",
    "# # Create a data frame with the new variables. We call these new variables PC1 and PC2\n",
    "dataPCA = pd.DataFrame(data = rotatedData, columns = ['PC1', 'PC2']) \n",
    "\n",
    "# Plot the transformed data in orange\n",
    "plt.scatter(dataPCA.PC1, dataPCA.PC2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, what is the direction in which the variables point?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Understanding the transformation model pcaTr\n",
    "\n",
    "As mentioned before, a PCA model is composed of a rotation matrix and its corresponding explained variance. In the next module, we will explain the details of the rotation matrices. \n",
    "\n",
    "* `pcaTr.components_` has the rotation matrix \n",
    "* `pcaTr.explained_variance_` has the explained variance of each principal component"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eigenvectors or principal component: First row must be in the direction of [1, n]\n",
      "[[ 0.70710678  0.70710678]\n",
      " [ 0.70710678 -0.70710678]]\n",
      "\n",
      "Eigenvalues or explained variance\n",
      "[1.69362864e-01 5.95709981e-33]\n"
     ]
    }
   ],
   "source": [
    "print('Eigenvectors or principal component: First row must be in the direction of [1, n]')\n",
    "print(pcaTr.components_)\n",
    "\n",
    "print()\n",
    "print('Eigenvalues or explained variance')\n",
    "print(pcaTr.explained_variance_)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$cos(45^o) = 0.7071$\n",
    "\n",
    "The rotation matrix is equal to:\n",
    "\n",
    "$$R = \\begin{bmatrix} cos(45^o) & sin(45^o) \\\\ -sin(45^o) & cos(45^o) \\end{bmatrix}$$ \n",
    "\n",
    "And $45^o$ is the same angle that form the variables y = 1 * x.\n",
    "\n",
    "Then, PCA has identified the angle in which point the original variables.\n",
    "\n",
    "And the explained Variance is around [0.166 0]. Remember that the Variance of a uniform random variable x ~ U(1, 2), as our x and y, is equal to:\n",
    "\n",
    "$$Var(x) = \\frac {(2 - 1)^2}{12} = 0.083333$$\n",
    "    \n",
    "Then the explained variance given by the PCA can be interpret as\n",
    "\n",
    "$$[Var(x) + Var(y)  \\ 0] = [0.0833 + 0.0833 \\  0] = [0.166 \\ 0]$$\n",
    "\n",
    "Which means that all the explained variance of our new system is explained by our first principal component. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Correlated Normal Random Variables.\n",
    "\n",
    "Now, we will use a controlled dataset composed of 2 random variables with different variances and with a specific Covariance among them. The only way I know to get such a dataset is, first, create two independent Normal random variables with the desired variances and then combine them using a rotation matrix. In this way, the new resulting variables will be a linear combination of the original random variables and thus be dependent and correlated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "angle:  45.0\n",
      "rotationMatrix\n",
      "[[ 0.70710678  0.70710678]\n",
      " [-0.70710678  0.70710678]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.lines as mlines\n",
    "import matplotlib.transforms as mtransforms\n",
    "\n",
    "random.seed(100)\n",
    "\n",
    "std1 = 1     # The desired standard deviation of our first random variable\n",
    "std2 = 0.333 # The desired standard deviation of our second random variable\n",
    "\n",
    "x = np.random.normal(0, std1, 1000) # Get 1000 samples from x ~ N(0, std1)\n",
    "y = np.random.normal(0, std2, 1000)  # Get 1000 samples from y ~ N(0, std2)\n",
    "#y = y + np.random.normal(0,1,1000)*noiseLevel * np.sin(0.78)\n",
    "\n",
    "# PCA works better if the data is centered\n",
    "x = x - np.mean(x) # Center x \n",
    "y = y - np.mean(y) # Center y\n",
    "\n",
    "#Define a pair of dependent variables with a desired amount of covariance\n",
    "n = 1 # Magnitude of covariance. \n",
    "angle = np.arctan(1 / n) # Convert the covariance to and angle\n",
    "print('angle: ',  angle * 180 / math.pi)\n",
    "\n",
    "# Create a rotation matrix using the given angle\n",
    "rotationMatrix = np.array([[np.cos(angle), np.sin(angle)],\n",
    "                 [-np.sin(angle), np.cos(angle)]])\n",
    "\n",
    "\n",
    "print('rotationMatrix')\n",
    "print(rotationMatrix)\n",
    "\n",
    "xy = np.concatenate(([x] , [y]), axis=0).T # Create a matrix with columns x and y\n",
    "\n",
    "# Transform the data using the rotation matrix. It correlates the two variables\n",
    "data = np.dot(xy, rotationMatrix) # Return a nD array\n",
    "\n",
    "# Print the rotated data\n",
    "plt.scatter(data[:,0], data[:,1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us print the original and the resulting transformed system using the result of the PCA in the same plot alongside with the 2 Principal Component vectors in red and blue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eigenvectors or principal component: First row must be in the direction of [1, n]\n",
      "[[ 0.72354494  0.69027728]\n",
      " [ 0.69027728 -0.72354494]]\n",
      "\n",
      "Eigenvalues or explained variance\n",
      "[0.95553929 0.11416615]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data[:,0], data[:,1]) # Print the original data in blue\n",
    "\n",
    "# Apply PCA. In theory, the Eigenvector matrix must be the \n",
    "# inverse of the original rotationMatrix. \n",
    "pca = PCA(n_components=2)  # Instantiate a PCA. Choose to get 2 output variables\n",
    "\n",
    "# Create the transformation model for this data. Internally it gets the rotation \n",
    "# matrix and the explained variance\n",
    "pcaTr = pca.fit(data)\n",
    "\n",
    "# Create an array with the transformed data\n",
    "dataPCA = pcaTr.transform(data)\n",
    "\n",
    "print('Eigenvectors or principal component: First row must be in the direction of [1, n]')\n",
    "print(pcaTr.components_)\n",
    "\n",
    "print()\n",
    "print('Eigenvalues or explained variance')\n",
    "print(pcaTr.explained_variance_)\n",
    "\n",
    "# Print the rotated data\n",
    "plt.scatter(dataPCA[:,0], dataPCA[:,1])\n",
    "\n",
    "# Plot the first component axe. Use the explained variance to scale the vector\n",
    "plt.plot([0, rotationMatrix[0][0] * std1 * 3], [0, rotationMatrix[0][1] * std1 * 3], 'k-', color='red')\n",
    "# Plot the second component axe. Use the explained variance to scale the vector\n",
    "plt.plot([0, rotationMatrix[1][0] * std2 * 3], [0, rotationMatrix[1][1] * std2 * 3], 'k-', color='green')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The explanation of this chart is as follows:\n",
    "* The rotation matrix used to create our correlated variables took the original uncorrelated variables `x` and `y` and transformed them into the blue points.\n",
    "* The PCA transformation finds out the rotation matrix used to create our correlated variables (blue points). Using the PCA model to transform our data, puts back the variables as our original uncorrelated variables.\n",
    "* The explained Variance of the PCA is \n",
    "\n",
    "$$[1.0094, 0.1125] $$\n",
    "\n",
    "which is approximately\n",
    "\n",
    "$$[1, 0.333 * 0.333] = [std1^2, std2^2],$$\n",
    "\n",
    "the parameters of our original random variables x and y\n",
    "\n",
    "You can use the previous code to try with other standard deviations and correlations and convince your self of this fact.   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PCA as a strategy for dimensionality reduction\n",
    "\n",
    "The principal components contained in the rotation matrix, are decreasingly sorted depending on its explained Variance. It usually means that the first components retain most of the power of the data to explain the patterns that **generalize** the data. Nevertheless, for some applications, we are interested in the patterns that explain much less Variance, for example, in novelty detection. \n",
    "\n",
    "In the next figure, we can see the original data and its corresponding projection over the first and second principal components. In other words, data comprised of a single variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nPoints = len(data)\n",
    "\n",
    "# Plot the original data in blue\n",
    "plt.scatter(data[:,0], data[:,1])\n",
    "\n",
    "#Plot the projection along the first component in orange\n",
    "plt.scatter(data[:,0], np.zeros(nPoints))\n",
    "\n",
    "#Plot the projection along the second component in green\n",
    "plt.scatter(np.zeros(nPoints), data[:,1])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PCA as a strategy to plot complex data\n",
    "\n",
    "The next chart shows a sample diagram displaying a dataset of pictures of cats and dogs. Raw pictures are composed of hundreds or even thousands of features. However, PCA allows us to reduce that many features to only two. In that reduced space of uncorrelated variables, we can easily separate cats and dogs. \n",
    "\n",
    "<img src = 'catdog.png'>\n",
    "\n",
    "You will learn how to generate a chart like this with word vectors in this week's programming assignment."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
